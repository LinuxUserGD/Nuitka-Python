Index: makepanda/makepanda.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/makepanda/makepanda.py b/makepanda/makepanda.py
--- a/makepanda/makepanda.py	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/makepanda/makepanda.py	(date 1642875375250)
@@ -7,6 +7,9 @@
 # panda3d.
 #
 ########################################################################
+import json
+import traceback
+
 try:
     import sys, os, platform, time, stat, re, getopt, threading, signal, shutil
     if sys.platform == "darwin" or sys.version_info >= (2, 6):
@@ -663,6 +666,9 @@
 IncDirectory("ALWAYS", GetOutputDir()+"/tmp")
 IncDirectory("ALWAYS", GetOutputDir()+"/include")

+if GetLinkAllStatic():
+    DefSymbol("ALWAYS", "ALL_STATIC", "")
+
 if (COMPILER == "MSVC"):
     PkgDisable("X11")
     PkgDisable("GLES")
@@ -752,8 +758,10 @@
             LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libpandassl.lib")
             LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libpandaeay.lib")
         else:
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libeay32.lib")
-            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/ssleay32.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libcrypto.lib")
+            LibName("OPENSSL", GetThirdpartyDir() + "openssl/lib/libssl.lib")
+            LibName("OPENSSL", "crypt32.lib")
+            LibName("OPENSSL", "ws2_32.lib")
     if (PkgSkip("PNG")==0):
         if os.path.isfile(GetThirdpartyDir() + "png/lib/libpng16_static.lib"):
             LibName("PNG", GetThirdpartyDir() + "png/lib/libpng16_static.lib")
@@ -785,7 +793,11 @@
         IncDirectory("OPENEXR", GetThirdpartyDir() + "openexr/include/OpenEXR")
         IncDirectory("OPENEXR", GetThirdpartyDir() + "openexr/include/Imath")
     if (PkgSkip("JPEG")==0):     LibName("JPEG",     GetThirdpartyDir() + "jpeg/lib/jpeg-static.lib")
-    if (PkgSkip("ZLIB")==0):     LibName("ZLIB",     GetThirdpartyDir() + "zlib/lib/zlibstatic.lib")
+    if (PkgSkip("ZLIB")==0):
+        if os.path.isfile(GetThirdpartyDir() + "zlib/lib/zlibstatic.lib"):
+            LibName("ZLIB", GetThirdpartyDir() + "zlib/lib/zlibstatic.lib")
+        else:
+            LibName("ZLIB", GetThirdpartyDir() + "zlib/lib/zlib.lib")
     if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "vrpn/lib/vrpn.lib")
     if (PkgSkip("VRPN")==0):     LibName("VRPN",     GetThirdpartyDir() + "vrpn/lib/quat.lib")
     if (PkgSkip("NVIDIACG")==0): LibName("CGGL",     GetThirdpartyDir() + "nvidiacg/lib/cgGL.lib")
@@ -794,7 +806,7 @@
     if (PkgSkip("FREETYPE")==0): LibName("FREETYPE", GetThirdpartyDir() + "freetype/lib/freetype.lib")
     if (PkgSkip("HARFBUZZ")==0):
         LibName("HARFBUZZ", GetThirdpartyDir() + "harfbuzz/lib/harfbuzz.lib")
-        IncDirectory("HARFBUZZ", GetThirdpartyDir() + "harfbuzz/include/harfbuzz")
+        IncDirectory("HARFBUZZ", GetThirdpartyDir() + "harfbuzz/include")
     if (PkgSkip("FFTW")==0):     LibName("FFTW",     GetThirdpartyDir() + "fftw/lib/fftw3.lib")
     if (PkgSkip("ARTOOLKIT")==0):LibName("ARTOOLKIT",GetThirdpartyDir() + "artoolkit/lib/libAR.lib")
     if (PkgSkip("OPENCV")==0):   LibName("OPENCV",   GetThirdpartyDir() + "opencv/lib/cv.lib")
@@ -852,17 +864,21 @@
         DefSymbol("WX",     "_UNICODE", "")
         DefSymbol("WX",     "UNICODE", "")
     if (PkgSkip("VORBIS")==0):
-        for lib in ('ogg', 'vorbis', 'vorbisfile'):
+        for lib in ('vorbis', 'vorbisfile'):
             path = GetThirdpartyDir() + "vorbis/lib/lib{0}_static.lib".format(lib)
             if not os.path.isfile(path):
                 path = GetThirdpartyDir() + "vorbis/lib/{0}.lib".format(lib)
             LibName("VORBIS", path)
+        path = GetThirdpartyDir() + "ogg/lib/libogg_static.lib".format(lib)
+        if not os.path.isfile(path):
+            path = GetThirdpartyDir() + "ogg/lib/ogg.lib".format(lib)
+        LibName("VORBIS", path)
     if (PkgSkip("OPUS")==0):
         IncDirectory("OPUS", GetThirdpartyDir() + "opus/include/opus")
         for lib in ('ogg', 'opus', 'opusfile'):
-            path = GetThirdpartyDir() + "opus/lib/lib{0}_static.lib".format(lib)
+            path = GetThirdpartyDir() + "{0}/lib/lib{0}_static.lib".format(lib)
             if not os.path.isfile(path):
-                path = GetThirdpartyDir() + "opus/lib/{0}.lib".format(lib)
+                path = GetThirdpartyDir() + "{0}/lib/{0}.lib".format(lib)
             LibName("OPUS", path)
     for pkg in MAYAVERSIONS:
         if (PkgSkip(pkg)==0):
@@ -1368,12 +1384,20 @@
                 if (opt=="ALWAYS") or (opt in opts): cmd += " /D" + var + "=" + val
             if (opts.count('MSFORSCOPE')): cmd += ' /Zc:forScope-'

-            if (optlevel==1): cmd += " /MDd /Zi /RTCs /GS"
-            if (optlevel==2): cmd += " /MDd /Zi"
-            if (optlevel==3): cmd += " /MD /Zi /GS- /O2 /Ob2 /Oi /Ot /fp:fast"
-            if (optlevel==4):
-                cmd += " /MD /Zi /GS- /Ox /Ob2 /Oi /Ot /fp:fast /DFORCE_INLINING /DNDEBUG /GL"
-                cmd += " /Oy /Zp16"      # jean-claude add /Zp16 insures correct static alignment for SSEx
+            if GetLinkAllStatic():
+                if (optlevel==1): cmd += " /MTd /Zi /RTCs /GS"
+                if (optlevel==2): cmd += " /MTd /Zi"
+                if (optlevel==3): cmd += " /MT /Zi /GS- /O2 /Ob2 /Oi /Ot /fp:fast"
+                if (optlevel==4):
+                    cmd += " /MT /Zi /GS- /Ox /Ob2 /Oi /Ot /fp:fast /DFORCE_INLINING /DNDEBUG /GL"
+                    cmd += " /Oy /Zp16"      # jean-claude add /Zp16 insures correct static alignment for SSEx
+            else:
+                if (optlevel==1): cmd += " /MDd /Zi /RTCs /GS"
+                if (optlevel==2): cmd += " /MDd /Zi"
+                if (optlevel==3): cmd += " /MD /Zi /GS- /O2 /Ob2 /Oi /Ot /fp:fast"
+                if (optlevel==4):
+                    cmd += " /MD /Zi /GS- /Ox /Ob2 /Oi /Ot /fp:fast /DFORCE_INLINING /DNDEBUG /GL"
+                    cmd += " /Oy /Zp16 "      # jean-claude add /Zp16 insures correct static alignment for SSEx

             cmd += " /Fd" + os.path.splitext(obj)[0] + ".pdb"

@@ -1839,6 +1863,31 @@
             for x in obj:
                 if not x.endswith('.lib'):
                     cmd += ' ' + BracketNameWithQuotes(x)
+            import __np__
+            lib_set = set()
+            lib_dir_set = set()
+            for (opt, name) in LIBNAMES:
+                if opt != "OPENSSL" and ((opt=="ALWAYS") or (opt in opts)):
+                    abs_path = name.replace(GetThirdpartyDir(), __np__.DEPENDENCY_INSTALL_DIR + "/")
+                    lib_set.add(os.path.basename(abs_path).replace(".lib", ""))
+                    lib_dir = os.path.dirname(abs_path)
+                    if lib_dir:
+                        lib_dir_set.add(lib_dir)
+            for (opt, dir) in LIBDIRECTORIES:
+                if (opt=="ALWAYS") or (opt in opts):
+                    lib_dir_set.add(dir)
+            for dependent_lib in obj:
+                if dependent_lib.endswith('.lib'):
+                    if os.path.exists(dependent_lib + ".link.json"):
+                        with open(dependent_lib + ".link.json", 'r') as f:
+                            link_data = json.load(f)
+                        lib_set.update(link_data["libraries"])
+                        lib_dir_set.update(link_data["library_dirs"])
+                    lib_dir_set.add("lib")
+                    lib_set.add(os.path.basename(dependent_lib).replace(".lib", ""))
+            link_info = {"libraries": list(lib_set), "library_dirs": list(lib_dir_set)}
+            with open(lib + ".link.json", 'w') as f:
+                json.dump(link_info, f)
             oscmd(cmd)
         else:
             # Choose Intel linker; from Jean-Claude
@@ -1877,21 +1926,28 @@
             cmd = "link /nologo "
             if HasTargetArch():
                 cmd += " /MACHINE:" + GetTargetArch().upper()
-            if ("MFC" not in opts):
+            if not GetLinkAllStatic() and "MFC" not in opts:
                 cmd += " /NOD:MFC90.LIB /NOD:MFC80.LIB /NOD:LIBCMT"
-            cmd += " /NOD:LIBCI.LIB /DEBUG"
-            cmd += " /nod:libc /nod:libcmtd /nod:atlthunk /nod:atls /nod:atlsd"
             if (GetOrigExt(dll) != ".exe"): cmd += " /DLL"
             optlevel = GetOptimizeOption(opts)
-            if (optlevel==1): cmd += " /MAP /MAPINFO:EXPORTS /NOD:MSVCRT.LIB /NOD:MSVCPRT.LIB /NOD:MSVCIRT.LIB"
-            if (optlevel==2): cmd += " /MAP:NUL /NOD:MSVCRT.LIB /NOD:MSVCPRT.LIB /NOD:MSVCIRT.LIB"
-            if (optlevel==3): cmd += " /MAP:NUL /NOD:MSVCRTD.LIB /NOD:MSVCPRTD.LIB /NOD:MSVCIRTD.LIB"
-            if (optlevel==4): cmd += " /MAP:NUL /LTCG /NOD:MSVCRTD.LIB /NOD:MSVCPRTD.LIB /NOD:MSVCIRTD.LIB"
-            if ("MFC" in opts):
+            if (optlevel==1): cmd += " /MAP /MAPINFO:EXPORTS "
+            if (optlevel==2): cmd += " /MAP:NUL "
+            if (optlevel==3): cmd += " /MAP:NUL "
+            if (optlevel==4): cmd += " /MAP:NUL /LTCG "
+            if not GetLinkAllStatic() and "MFC" in opts:
                 if (optlevel<=2): cmd += " /NOD:MSVCRTD.LIB mfcs100d.lib MSVCRTD.lib"
                 else: cmd += " /NOD:MSVCRT.LIB mfcs100.lib MSVCRT.lib"
-            cmd += " /FIXED:NO /OPT:REF /STACK:4194304 /INCREMENTAL:NO "
+            cmd += " /FIXED:NO /OPT:REF /STACK:4194304 "
             cmd += ' /OUT:' + BracketNameWithQuotes(dll)
+            if not GetLinkAllStatic():
+                cmd += " /NOD:LIBCI.LIB /DEBUG"
+                cmd += " /nod:libc /nod:libcmtd /nod:atlthunk /nod:atls /nod:atlsd"
+                if (optlevel==1): cmd += " /NOD:MSVCRT.LIB /NOD:MSVCPRT.LIB /NOD:MSVCIRT.LIB"
+                if (optlevel==2): cmd += " /NOD:MSVCRT.LIB /NOD:MSVCPRT.LIB /NOD:MSVCIRT.LIB"
+                if (optlevel==3): cmd += " /NOD:MSVCRTD.LIB /NOD:MSVCPRTD.LIB /NOD:MSVCIRTD.LIB"
+                if (optlevel==4): cmd += " /NOD:MSVCRTD.LIB /NOD:MSVCPRTD.LIB /NOD:MSVCIRTD.LIB"
+                cmd += " /INCREMENTAL:NO"
+

             if not PkgSkip("PYTHON"):
                 # If we're building without Python, don't pick it up implicitly.
@@ -3264,19 +3320,19 @@
     if not PkgSkip("FMODEX"):
         configprc = configprc.replace("p3openal_audio", "p3fmod_audio")

-if PkgSkip("GL") or GetLinkAllStatic():
+if PkgSkip("GL"):
     configprc = configprc.replace("\nload-display pandagl", "\n#load-display pandagl")

 if PkgSkip("GLES") or GetLinkAllStatic():
     configprc = configprc.replace("\n#load-display pandagles", "")

-if PkgSkip("DX9") or GetLinkAllStatic():
+if PkgSkip("DX9"):
     configprc = configprc.replace("\n#load-display pandadx9", "")

 if PkgSkip("TINYDISPLAY") or GetLinkAllStatic():
     configprc = configprc.replace("\n#load-display p3tinydisplay", "")

-if PkgSkip("OPENAL") or GetLinkAllStatic():
+if PkgSkip("OPENAL"):
     configprc = configprc.replace("audio-library-name p3openal_audio", "#audio-library-name p3openal_audio")

 if GetTarget() == 'windows':
@@ -3393,13 +3449,14 @@
             CopyAllFiles(GetOutputDir() + "/bin/", tp_dir + "extras/bin/")

         if not PkgSkip("PYTHON") and not RTDIST:
-            # We need to copy the Python DLL to the bin directory for now.
-            pydll = "/" + SDK["PYTHONVERSION"].replace(".", "")
-            if GetOptimize() <= 2:
-                pydll += "_d.dll"
-            else:
-                pydll += ".dll"
-            CopyFile(GetOutputDir() + "/bin" + pydll, SDK["PYTHON"] + pydll)
+            if not GetLinkAllStatic():
+                # We need to copy the Python DLL to the bin directory for now.
+                pydll = "/" + SDK["PYTHONVERSION"].replace(".", "")
+                if GetOptimize() <= 2:
+                    pydll += "_d.dll"
+                else:
+                    pydll += ".dll"
+                CopyFile(GetOutputDir() + "/bin" + pydll, SDK["PYTHON"] + pydll)

             for fn in glob.glob(SDK["PYTHON"] + "/vcruntime*.dll"):
                 CopyFile(GetOutputDir() + "/bin/", fn)
@@ -3715,6 +3772,13 @@
     'libpandaegg.dll',
 ] + COMMON_PANDA_LIBS

+if GetLinkAllStatic() and not PkgSkip("GL"):
+    COMMON_EGG2X_LIBS+=['libpandagl.dll']
+if GetLinkAllStatic() and not PkgSkip("DX9"):
+    COMMON_EGG2X_LIBS+=['libpandadx9.dll']
+if GetLinkAllStatic() and not PkgSkip("TINYDISPLAY"):
+    COMMON_EGG2X_LIBS+=['libp3tinydisplay.dll']
+
 ########################################################################
 #
 # This section contains a list of all the files that need to be compiled.
@@ -4058,7 +4122,10 @@
 #

 if (not RUNTIME):
-  OPTS=['DIR:panda/src/audio', 'BUILDING:PANDA']
+  OPTS=['DIR:panda/src/audio', 'BUILDING:PANDA', 'STATICAUDIO']
+  if GetLinkAllStatic():
+      if not PkgSkip("OPENAL"):
+          DefSymbol("STATICAUDIO", "HAVE_OPENAL")
   TargetAdd('p3audio_composite1.obj', opts=OPTS, input='p3audio_composite1.cxx')

   OPTS=['DIR:panda/src/audio']
@@ -4266,7 +4333,21 @@
 #

 if (not RUNTIME):
-  OPTS=['DIR:panda/src/display', 'BUILDING:PANDA', 'X11']
+  deps = []
+  # display needs to link in a renderer when building statically for python, so tell it what is available.
+  if GetLinkAllStatic():
+    deps = ['dtool_have_gl.dat', 'dtool_have_tinydisplay.dat', 'dtool_have_egg.dat']
+    if not PkgSkip("GL"):
+      DefSymbol("PYDISPLAY", "HAVE_GL")
+    if not PkgSkip("DX9"):
+      DefSymbol("PYDISPLAY", "HAVE_DX9")
+    if not PkgSkip("TINYDISPLAY"):
+      DefSymbol("PYDISPLAY", "HAVE_TINYDISPLAY")
+    if not PkgSkip("EGG"):
+      DefSymbol("PYDISPLAY", "HAVE_EGG")
+    if not PkgSkip("OPENAL"):
+      DefSymbol("PYDISPLAY", "HAVE_OPENAL")
+  OPTS=['DIR:panda/src/display', 'BUILDING:PANDA', 'X11', "PYDISPLAY"]
   TargetAdd('p3display_graphicsStateGuardian.obj', opts=OPTS, input='graphicsStateGuardian.cxx')
   TargetAdd('p3display_composite1.obj', opts=OPTS, input='p3display_composite1.cxx')
   TargetAdd('p3display_composite2.obj', opts=OPTS, input='p3display_composite2.cxx')
@@ -4276,7 +4357,7 @@
   IGATEFILES.remove("renderBuffer.h")
   TargetAdd('libp3display.in', opts=OPTS, input=IGATEFILES)
   TargetAdd('libp3display.in', opts=['IMOD:panda3d.core', 'ILIB:libp3display', 'SRCDIR:panda/src/display'])
-  PyTargetAdd('p3display_ext_composite.obj', opts=OPTS, input='p3display_ext_composite.cxx')
+  PyTargetAdd('p3display_ext_composite.obj', opts=OPTS, input='p3display_ext_composite.cxx', dep=deps)

   if RTDIST and GetTarget() == 'darwin':
     OPTS=['DIR:panda/src/display']
@@ -4653,6 +4734,17 @@
   PyTargetAdd('core.pyd', input='p3pgraph_ext_composite.obj')
   PyTargetAdd('core.pyd', input='p3display_ext_composite.obj')

+  if GetLinkAllStatic() and not PkgSkip("GL"):
+    PyTargetAdd('core.pyd', input='libpandagl.dll')
+  if GetLinkAllStatic() and not PkgSkip("DX9"):
+    PyTargetAdd('core.pyd', input='libpandadx9.dll')
+  if GetLinkAllStatic() and not PkgSkip("TINYDISPLAY"):
+    PyTargetAdd('core.pyd', input='libp3tinydisplay.dll')
+  if GetLinkAllStatic() and not PkgSkip("OPENAL"):
+    PyTargetAdd('core.pyd', input='libp3openal_audio.dll')
+  if GetLinkAllStatic() and not PkgSkip("EGG"):
+    PyTargetAdd('core.pyd', input='libpandaegg.dll')
+
   PyTargetAdd('core.pyd', input='core_module.obj')
   if not GetLinkAllStatic() and GetTarget() != 'emscripten':
      PyTargetAdd('core.pyd', input='libp3tinyxml.ilb')
@@ -5448,6 +5540,12 @@
   TargetAdd('pview_pview.obj', opts=OPTS, input='pview.cxx')
   TargetAdd('pview.exe', input='pview_pview.obj')
   TargetAdd('pview.exe', input='libp3framework.dll')
+  if GetLinkAllStatic() and not PkgSkip("GL"):
+    TargetAdd('pview.exe', input='libpandagl.dll')
+  if GetLinkAllStatic() and not PkgSkip("DX9"):
+    TargetAdd('pview.exe', input='libpandadx9.dll')
+  if GetLinkAllStatic() and not PkgSkip("TINYDISPLAY"):
+    TargetAdd('pview.exe', input='libp3tinydisplay.dll')
   if not PkgSkip("EGG"):
     TargetAdd('pview.exe', input='libpandaegg.dll')
   TargetAdd('pview.exe', input=COMMON_PANDA_LIBS)
@@ -6445,6 +6543,12 @@
   TargetAdd('pfm-trans.exe', input='pfm-trans_pfmTrans.obj')
   TargetAdd('pfm-trans.exe', input='libp3progbase.lib')
   TargetAdd('pfm-trans.exe', input='libp3pandatoolbase.lib')
+  if GetLinkAllStatic() and not PkgSkip("GL"):
+    TargetAdd('pfm-trans.exe', input='libpandagl.dll')
+  if GetLinkAllStatic() and not PkgSkip("DX9"):
+    TargetAdd('pfm-trans.exe', input='libpandadx9.dll')
+  if GetLinkAllStatic() and not PkgSkip("TINYDISPLAY"):
+    TargetAdd('pfm-trans.exe', input='libp3tinydisplay.dll')
   TargetAdd('pfm-trans.exe', input=COMMON_PANDA_LIBS)
   TargetAdd('pfm-trans.exe', opts=['ADVAPI'])

@@ -6921,7 +7025,7 @@
 #
 # DIRECTORY: pandatool/src/deploy-stub
 #
-if PkgSkip("PYTHON") == 0:
+if PkgSkip("PYTHON") == 0 and not GetLinkAllStatic():
     OPTS=['DIR:pandatool/src/deploy-stub', 'BUILDING:DEPLOYSTUB']
     PyTargetAdd('deploy-stub.obj', opts=OPTS, input='deploy-stub.c')
     if GetTarget() == 'windows':
Index: panda/src/display/graphicsPipeSelection.cxx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/panda/src/display/graphicsPipeSelection.cxx b/panda/src/display/graphicsPipeSelection.cxx
--- a/panda/src/display/graphicsPipeSelection.cxx	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/panda/src/display/graphicsPipeSelection.cxx	(date 1640993323192)
@@ -22,6 +22,20 @@
 
 #include <algorithm>
 
+#ifdef LINK_ALL_STATIC
+
+#if defined(HAVE_DX9)
+extern "C" extern int get_pipe_type_pandadx9();
+#endif
+#if defined(HAVE_GL)
+extern "C" extern int get_pipe_type_pandagl();
+#endif
+#if defined(HAVE_TINYDISPLAY)
+extern "C" extern int get_pipe_type_p3tinydisplay();
+#endif
+
+#endif
+
 using std::string;
 
 GraphicsPipeSelection *GraphicsPipeSelection::_global_ptr = nullptr;
@@ -391,8 +405,28 @@
     return (*mi).second._default_pipe_type;
   }
 
-  // We have not yet loaded this module.  Load it now.
+  void *dso_symbol = nullptr;
+  string symbol_name = "get_pipe_type_" + name;
   Filename dlname = Filename::dso_filename("lib" + name + ".so");
+
+#ifdef LINK_ALL_STATIC
+#if defined(HAVE_DX9)
+  if (name == "pandadx9") {
+    dso_symbol = get_pipe_type_pandadx9;
+  }
+#endif
+#if defined(HAVE_GL)
+  if (name == "pandagl") {
+    dso_symbol = get_pipe_type_pandagl;
+  }
+#endif
+#if defined(HAVE_TINYDISPLAY)
+  if (name == "p3tinydisplay") {
+    dso_symbol = get_pipe_type_p3tinydisplay;
+  }
+#endif
+#else
+  // We have not yet loaded this module.  Load it now.
   display_cat.info()
     << "loading display module: " << dlname.to_os_specific() << std::endl;
   void *handle = load_dso(get_plugin_path().get_value(), dlname);
@@ -405,8 +439,8 @@
 
   // Now get the module's recommended pipe type.  This requires calling a
   // specially-named function that should have been exported from the module.
-  string symbol_name = "get_pipe_type_" + name;
-  void *dso_symbol = get_dso_symbol(handle, symbol_name);
+  dso_symbol = get_dso_symbol(handle, symbol_name);
+#endif
   if (display_cat.is_debug()) {
     display_cat.debug()
       << "symbol of " << symbol_name << " = " << dso_symbol << "\n";
@@ -451,10 +485,12 @@
       << "\n";
   }
 
+#if !defined(LINK_ALL_STATIC)
   LoadedModule &module = _loaded_modules[name];
   module._module_name = name;
   module._module_handle = handle;
   module._default_pipe_type = pipe_type;
+#endif
 
   return pipe_type;
 }
Index: makepanda/makewheel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/makepanda/makewheel.py b/makepanda/makewheel.py
--- a/makepanda/makewheel.py	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/makepanda/makewheel.py	(date 1642875422458)
@@ -15,7 +15,7 @@
 import subprocess
 from distutils.sysconfig import get_config_var
 from optparse import OptionParser
-from makepandacore import ColorText, LocateBinary, GetExtensionSuffix, SetVerbose, GetVerbose, GetMetadataValue
+from makepandacore import ColorText, LocateBinary, GetExtensionSuffix, SetVerbose, GetVerbose, GetMetadataValue, GetLinkAllStatic
 from base64 import urlsafe_b64encode
 
 
@@ -73,6 +73,8 @@
 
 
 def get_python_ext_module_dir():
+    import sysconfig
+    return sysconfig.get_config_var('BINLIBDEST')
     import _ctypes
     return os.path.dirname(_ctypes.__file__)
 
@@ -300,7 +302,7 @@
         self.platform = platform
 
         wheel_name = "{0}-{1}-{2}-{3}-{4}.whl".format(
-            name, version, PY_VERSION, ABI_TAG, platform)
+            name, version, "py39", "none", platform)
 
         print("Writing %s" % (wheel_name))
         self.zip_file = zipfile.ZipFile(wheel_name, 'w', zipfile.ZIP_DEFLATED)
@@ -570,7 +572,7 @@
     models_dir = join(output_dir, "models")
     etc_dir = join(output_dir, "etc")
     bin_dir = join(output_dir, "bin")
-    if sys.platform == "win32":
+    if sys.platform == "win32" and not GetLinkAllStatic():
         libs_dir = join(output_dir, "bin")
     else:
         libs_dir = join(output_dir, "lib")
@@ -620,6 +622,8 @@
 
         whl.ignore_deps.update(MANYLINUX_LIBS)
 
+    whl.lib_path = []
+
     # Add libpython for deployment.
     if sys.platform in ('win32', 'cygwin'):
         pylib_name = 'python{0}{1}.dll'.format(*sys.version_info)
@@ -637,7 +641,7 @@
             pylib_path = os.path.join(libdir, pylib_name)
 
     # If Python was linked statically, we don't need to include this.
-    if not pylib_name.endswith('.a'):
+    if not pylib_name.endswith('.a') and os.path.exists(pylib_path):
         whl.write_file('deploy_libs/' + pylib_name, pylib_path)
 
     # Add the trees with Python modules.
@@ -667,6 +671,12 @@
 
             whl.write_file(target_path, source_path)
 
+    for file in os.listdir(libs_dir):
+        if file.startswith("libpy.panda3d."):
+            whl.write_file("panda3d/" + file[14:], os.path.join(libs_dir, file))
+        else:
+            whl.write_file("panda3d/lib/" + file, os.path.join(libs_dir, file))
+
     # And copy the extension modules from the Python installation into the
     # deploy_libs directory, for use by deploy-ng.
     ext_suffix = '.pyd' if sys.platform in ('win32', 'cygwin') else '.so'
Index: panda/src/display/graphicsEngine_ext.cxx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/panda/src/display/graphicsEngine_ext.cxx b/panda/src/display/graphicsEngine_ext.cxx
new file mode 100644
--- /dev/null	(date 1641358037695)
+++ b/panda/src/display/graphicsEngine_ext.cxx	(date 1641358037695)
@@ -0,0 +1,67 @@
+/**
+ * All use of this software is subject to the terms of the revised BSD
+ * license.  You should have received a copy of this license along
+ * with this source code in a file named "LICENSE."
+ *
+ * @file graphicsEngine_ext.cxx
+ * @author Maxwell175
+ * @date 2021-12-04
+ */
+
+#include "graphicsEngine_ext.h"
+
+#ifdef LINK_ALL_STATIC
+#ifdef HAVE_EGG
+#include "pandaegg.h"
+#endif
+
+extern "C" extern void init_libOpenALAudio();
+#endif
+
+#ifdef HAVE_PYTHON
+
+GraphicsEngine *Extension<GraphicsEngine>::
+get_global_ptr() {
+#ifdef LINK_ALL_STATIC
+  // If we're statically linking, we need to explicitly link with at least one
+  // of the available renderers.
+  #if defined(HAVE_TINYDISPLAY)
+  extern EXPCL_TINYDISPLAY void init_libtinydisplay();
+  init_libtinydisplay();
+  #endif
+  #if defined(HAVE_DX9)
+  extern EXPCL_PANDADX void init_libpandadx9();
+  init_libpandadx9();
+  #endif
+  #if defined(HAVE_GL)
+  extern void init_libpandagl();
+  init_libpandagl();
+  #endif
+
+
+  init_libOpenALAudio();
+
+
+  // Ensure the animation subsystem is available.
+  extern EXPCL_PANDA_CHAR void init_libchar();
+  init_libchar();
+
+  // Ensure we can load audio files.
+  extern EXPCL_PANDA_MOVIES void init_libmovies();
+  init_libmovies();
+
+  // We also want the egg loader.
+  #ifdef HAVE_EGG
+  init_libpandaegg();
+  #endif
+
+  // Let's explicitly make a call to the image type library to ensure it gets
+  // pulled in by the dynamic linker.
+  extern EXPCL_PANDA_PNMIMAGETYPES void init_libpnmimagetypes();
+  init_libpnmimagetypes();
+#endif
+
+  return GraphicsEngine::get_global_ptr();
+}
+
+#endif
Index: panda/src/display/graphicsEngine_ext.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/panda/src/display/graphicsEngine_ext.h b/panda/src/display/graphicsEngine_ext.h
new file mode 100644
--- /dev/null	(date 1640993323697)
+++ b/panda/src/display/graphicsEngine_ext.h	(date 1640993323697)
@@ -0,0 +1,34 @@
+/**
+ * All use of this software is subject to the terms of the revised BSD
+ * license.  You should have received a copy of this license along
+ * with this source code in a file named "LICENSE."
+ *
+ * @file graphicsEngine_ext.h
+ * @author Maxwell175
+ * @date 2021-12-04
+ */
+
+#ifndef GRAPHICSENGINE_EXT_H
+#define GRAPHICSENGINE_EXT_H
+
+#include "dtoolbase.h"
+
+#ifdef HAVE_PYTHON
+
+#include "extension.h"
+#include "graphicsEngine.h"
+#include "py_panda.h"
+
+/**
+ * This class defines the extension methods for Ramfile, which are called
+ * instead of any C++ methods with the same prototype.
+ */
+template<>
+class Extension<GraphicsEngine> : public ExtensionBase<GraphicsEngine> {
+public:
+  static GraphicsEngine *get_global_ptr();
+};
+
+#endif  // HAVE_PYTHON
+
+#endif  // GRAPHICSENGINE_EXT_H
Index: panda/src/display/p3display_ext_composite.cxx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/panda/src/display/p3display_ext_composite.cxx b/panda/src/display/p3display_ext_composite.cxx
--- a/panda/src/display/p3display_ext_composite.cxx	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/panda/src/display/p3display_ext_composite.cxx	(date 1640993323781)
@@ -1,3 +1,4 @@
+#include "graphicsEngine_ext.cxx"
 #include "graphicsStateGuardian_ext.cxx"
 #include "graphicsWindow_ext.cxx"
 #include "pythonGraphicsWindowProc.cxx"
Index: makepanda/makepandacore.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/makepanda/makepandacore.py b/makepanda/makepandacore.py
--- a/makepanda/makepandacore.py	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/makepanda/makepandacore.py	(date 1640993323367)
@@ -2187,6 +2187,9 @@
             sdkdir += "-dbg"
         if GetTargetArch() == 'x64':
             sdkdir += "-x64"
+            
+        if not os.path.isdir(sdkdir):
+            sdkdir = sys.prefix
 
         SDK["PYTHON"] = sdkdir
         SDK["PYTHONEXEC"] = SDK["PYTHON"].replace('\\', '/') + "/python"
@@ -2199,12 +2202,20 @@
             exit("Could not find %s!" % SDK["PYTHONEXEC"])
 
         # Determine which version it is by checking which dll is in the directory.
-        if (GetOptimize() <= 2):
-            py_dlls = glob.glob(SDK["PYTHON"] + "/python[0-9][0-9]_d.dll") + \
-                      glob.glob(SDK["PYTHON"] + "/python[0-9][0-9][0-9]_d.dll")
-        else:
-            py_dlls = glob.glob(SDK["PYTHON"] + "/python[0-9][0-9].dll") + \
-                      glob.glob(SDK["PYTHON"] + "/python[0-9][0-9][0-9].dll")
+        if GetLinkAllStatic():
+            if (GetOptimize() <= 2):
+                py_dlls = glob.glob(SDK["PYTHON"] + "/libs/python[0-9][0-9]_d.lib") + \
+                          glob.glob(SDK["PYTHON"] + "/libs/python[0-9][0-9][0-9]_d.lib")
+            else:
+                py_dlls = glob.glob(SDK["PYTHON"] + "/libs/python[0-9][0-9].lib") + \
+                          glob.glob(SDK["PYTHON"] + "/libs/python[0-9][0-9][0-9].lib")
+        else:
+            if (GetOptimize() <= 2):
+                py_dlls = glob.glob(SDK["PYTHON"] + "/python[0-9][0-9]_d.dll") + \
+                          glob.glob(SDK["PYTHON"] + "/python[0-9][0-9][0-9]_d.dll")
+            else:
+                py_dlls = glob.glob(SDK["PYTHON"] + "/python[0-9][0-9].dll") + \
+                          glob.glob(SDK["PYTHON"] + "/python[0-9][0-9][0-9].dll")
 
         if len(py_dlls) == 0:
             exit("Could not find the Python dll in %s." % (SDK["PYTHON"]))
@@ -2212,7 +2223,7 @@
             exit("Found multiple Python dlls in %s." % (SDK["PYTHON"]))
 
         py_dll = os.path.basename(py_dlls[0])
-        py_dllver = py_dll.strip(".DHLNOPTY_dhlnopty")
+        py_dllver = py_dll.strip(".DHLNOPTYIB_dhlnoptyib")
         ver = py_dllver[0] + '.' + py_dllver[1:]
 
         SDK["PYTHONVERSION"] = "python" + ver
Index: dtool/src/dtoolutil/executionEnvironment.cxx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dtool/src/dtoolutil/executionEnvironment.cxx b/dtool/src/dtoolutil/executionEnvironment.cxx
--- a/dtool/src/dtoolutil/executionEnvironment.cxx	(revision b3d3b520985248c9feddc44878441d75defae349)
+++ b/dtool/src/dtoolutil/executionEnvironment.cxx	(date 1640993323382)
@@ -453,7 +453,7 @@
 string ExecutionEnvironment::
 ns_get_dtool_name() const {
   if (_dtool_name.empty()) {
-    return "unknown";
+    return ns_get_binary_name();
   }
   return _dtool_name;
 }
